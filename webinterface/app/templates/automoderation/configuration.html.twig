{% extends 'base.html.twig' %}
{% block body %}
    {% include 'navbar.html.twig' %}

<div class="container">
    <div class="d-flex justify-content-between align-items-start">
        <h3><span class="badge badge-primary">Configure auto moderations</span></h3>
    </div>
    {% if guild|default %}
        <div class="card m-3" id="form-guild">
            <div class="card-body d-flex flex-row">
                <div class="align-self-start mr-3">
                    <img
                            src="https://cdn.discordapp.com/icons/{{ guild.id|default }}/{{ guild.icon|default }}.png"
                            class="card-img rounded-circle z-depth-0 mr-1"
                            alt="avatar icon"
                            height="35"
                            style="width: unset"
                    />
                </div>
                <div class="flex-grow-1">
                    <h4 class="card-title">{{ guild.name }}</h4>
                </div>
            </div>
        </div>
    {% endif %}
    <div id="rules">
        {% include 'automoderation/rule.html.twig' with { 'uniquelabel': 'invite', 'ruletitle': 'Invites', 'ruledescription': 'A message on your guild matches the invite pattern.' } %}
        <div class="rule" id="rule-last">
            <div class="d-flex" style="align-items: center">
                <span class="flex-grow-1 mr-3" style="font-size: 20px;">
                    More rules
                </span>
                <hr class="spacer-type1"/>
            </div>

            <div class="card rounded mb-3">
                <div class="card-body">
                    <h4 class="card-title"><a>More rules coming soon</a></h4>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock body %}

{% block scriptblock %}
<script>
    function excludeRole(button) {
        let role = $($(button).attr("data-source") + " option:selected");
        if (role.val()) {
            $($(button).attr("data-target")).append("<span title=\"Click to delete\" onclick=\"removeEntry(this)\" style=\"background-color:" + role.attr("data-color") + "!important\" class=\"badge badge-pill badge-info mt-1 mr-1 custom-label\" data-value=\"" + role.val() + "\">" + role.text() + "</span>");
            $($(button).attr("data-source")).val("");
        } else {
            toastr.warning("Please choose a role first.")
        }
    }

    function excludeChannel(button) {
        let channel = $($(button).attr("data-source") + " option:selected");
        if (channel.val()) {
            $($(button).attr("data-target")).append("<span title=\"Click to delete\" onclick=\"removeEntry(this)\" class=\"badge badge-pill badge-info mt-1 mr-1 custom-label\" data-value=\"" + channel.val() + "\">" + channel.text() + "</span>");
            $($(button).attr("data-source")).val("");
        } else {
            toastr.warning("Please choose a channel first.")
        }
    }

    function removeEntry(label) {
        $(label).remove();
    }

    var guild = {{ guild|json_encode|raw }};
    $(document).ready(function () {
        let config = {{ config|json_encode|raw }};
        $('.rule-toggles').each(function (i, obj) {
            $(obj).prop("checked", false);
        });
        config.forEach(element => applyConfigToHtml(element));
    });

    typeMap = {
        "0": "invite",
        "1": "test"
    }
    function hideConfigFromHtml(type) {
        if (!(type in typeMap)) {
            return;
        }

        let uniquelabel = typeMap[type];
        let toggle = $('#toggle-' + uniquelabel)
        toggle.prop('checked', false);
        handleCollapse(toggle);
    }

    function applyConfigToHtml(config) {
        let key = config["autoModerationType"].toString();
        if (!(key in typeMap)) {
            return;
        }

        let uniquelabel = typeMap[key];
        let toggle = $('#toggle-' + uniquelabel)
        toggle.prop('checked', true);
        handleCollapse(toggle);

        $('#send-dm-label-' + uniquelabel).prop("checked", config["sendDmNotification"]);
        $('#public-notification-label-' + uniquelabel).prop("checked", config["sendPublicNotification"]);
        $('#delete-content-label-' + uniquelabel).prop("checked", config["autoModerationAction"] === 1 || config["autoModerationAction"] === 3);
        let create_case = $('#create-case-label-' + uniquelabel);
        let create_case_option = config["autoModerationAction"] === 2 || config["autoModerationAction"] === 3;
        create_case.prop("checked", create_case_option);
        createCaseButton(create_case);

        if (create_case_option) {
            let punishmentSelect = $('#punishment-type-' + uniquelabel);
            switch (config["punishmentType"]) {
                case 1:
                    if (config["punishmentDurationMinutes"]) {
                        punishmentSelect.val("TempMute")
                    } else {
                        punishmentSelect.val("Mute")
                    }
                    break;
                case 2:
                    punishmentSelect.val("Kick")
                    break;
                case 3:
                    if (config["punishmentDurationMinutes"]) {
                        punishmentSelect.val("TempBan")
                    } else {
                        punishmentSelect.val("Ban")
                    }
                    break;
                default:
                    punishmentSelect.val("Warn")
                    break;
            }
            $('#punishment-duration-' + uniquelabel).val(config["punishmentDurationMinutes"]);
            punishmentChange(punishmentSelect);
        }

        $('#' + uniquelabel + '-exclude-roles-list').empty();
        config["ignoreRoles"].forEach(i => {
            let roles = guild["roles"].filter(obj => {
                return obj.id === i
            });
            if (!roles) {
                return;
            }

            let role = roles[0];
            $('#' + uniquelabel + '-exclude-roles-list').append("<span title=\"Click to delete\" onclick=\"removeEntry(this)\" style=\"background-color:" + role.color + "!important\" class=\"badge badge-pill badge-info mt-1 mr-1 custom-label\" data-value=\"" + role.id + "\">" + role.name + "</span>");
        });

        let exclude_roles_button = $('#' + uniquelabel + '-exclude-roles-label');
        exclude_roles_button.prop("checked", config["ignoreRoles"].length);
        handleCollapse(exclude_roles_button);

        $('#' + uniquelabel + '-exclude-channels-list').empty();
        config["ignoreChannels"].forEach(i => {
            let channels = guild["channels"].filter(obj => {
                return obj.id === i
            });
            if (!channels) {
                return;
            }

            let channel = channels[0];
            $('#' + uniquelabel + '-exclude-channels-list').append("<span title=\"Click to delete\" onclick=\"removeEntry(this)\" class=\"badge badge-pill badge-info mt-1 mr-1 custom-label\" data-value=\"" + channel.id + "\">" + channel.name + "</span>");
        });

        let exclude_channels_button = $('#' + uniquelabel + '-exclude-channels-label');
        exclude_channels_button.prop("checked", config["ignoreChannels"].length);
        handleCollapse(exclude_channels_button);
    }

    function handleCheckbox(box) {
        if ($(box).is(":checked").toString() === "true") {
            $($(box).attr("data-target")).css("display", "block");
        } else {
            $($(box).attr("data-target")).css("display", "none");
        }
    }

    function handleCollapse(item) {
        if ($(item).is(":checked").toString() === "true") {
            $($(item).attr("data-target")).collapse("show");
        } else {
            $($(item).attr("data-target")).collapse("hide");
        }
    }
</script>
{% endblock scriptblock %}
