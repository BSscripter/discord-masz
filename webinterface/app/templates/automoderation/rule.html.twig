{% block body %}
<div class="rule" id="rule-{{ uniquelabel }}s">
    <div class="d-flex" style="align-items: center">
                <span class="flex-grow-1 mr-3" style="font-size: 20px;">
                    {{ ruletitle }}
                </span>
        <hr class="spacer-type1 "/>
    </div>
    <div>
        <div class="d-flex flex-row justify-content-center align-items-center">
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="rule-toggles custom-control-input active" id="toggle-{{ uniquelabel }}" data-target="#{{ uniquelabel }}" onclick="handleCollapse(this)">
                <label class="custom-control-label" for="toggle-{{ uniquelabel }}">Enable this module?</label>
            </div>
            <div class="flex-grow-1"></div>
            <button type="button" class="btn btn-success align-self-end" data-unique="{{ uniquelabel }}" onclick="saveChanges(this)">Save changes</button>
        </div>
        <div id="{{ uniquelabel }}" class="collapse">
            <div class="d-flex flex-row justify-content-center">
                <div class="mod-field mod-trigger">
                    <i class="fas fa-bolt fa-2x mod-icon"></i>
                    <span class="mod-title">Event</span>
                    <div class="mod-body mt-3">
                        {{ ruledescription }}
                    </div>
                </div>
                <hr class="spacer-type0 spacer-short flex-shrink-1" style="margin-top: 2rem"/>
                <div class="mod-field mod-filter">
                    {% include 'automoderation/filter.html.twig' %}
                </div>
                <hr class="spacer-type0 spacer-short flex-shrink-1" style="margin-top: 2rem"/>
                <div class="mod-field mod-effect">
                    {% include 'automoderation/action.html.twig' %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock body %}

{% block scriptblock %}
<script>
    reloadMap = {
        "invite": "0",
        "test": "1"
    }

    function deleteConfig(unique) {
        let type = reloadMap[unique];
        $.ajax({
            type: "DELETE",
            url: "/api/v1/guilds/{{ guild.id }}/automoderationconfig/" + type,
            crossDomain: true,
            xhrFields: {
                withCredentials: true
            },
            success: function(data){
                toastr.success("Changes saved.");
                hideConfigFromHtml(reloadMap[unique]);
            },
            error: function(errMsg) {
                if (errMsg.status === 404) {
                    return;
                }
                handleRequestError(errMsg);
            }
        });
    }

    function saveChanges(button) {
        let unique = $(button).attr("data-unique");

        if (!(unique in reloadMap)) {
            toastr.error("Invalid type.");
            return;
        }

        let checked = $('#toggle-' + unique).is(":checked");
        if (!checked) {
            deleteConfig(unique);
            return;
        }

        var body = {
            "autoModerationType": reloadMap[unique],
            "sendDmNotification": $('#send-dm-label-' + unique).is(":checked"),
            "sendPublicNotification": $('#public-notification-label-' + unique).is(":checked"),
            "punishmentDurationMinutes": parseInt($('#punishment-duration-' + unique).val()) || null,
            "timeLimitMinutes": null,
            "limit": null
        };

        if (body["punishmentDurationMinutes"] < 0) {
            body["punishmentDurationMinutes"] = null;
        }

        body["autoModerationAction"] = 0;
        let deleteContent = $('#delete-content-label-' + unique).is(":checked");
        let createCase = $('#create-case-label-' + unique).is(":checked");
        if (deleteContent) {
            body["autoModerationAction"] += 1;
        }
        if (createCase) {
            body["autoModerationAction"] += 2;
        }

        let mappedPunishmentType = 0;
        switch($('#punishment-type-' + unique + ' option:selected').text()) {
            case "TempMute":
            case "Mute":
                mappedPunishmentType = 1;
                break;
            case "Kick":
                mappedPunishmentType = 2;
                break;
            case "TempBan":
            case "Ban":
                mappedPunishmentType = 3;
                break;
        }
        body["punishmentType"] = mappedPunishmentType;

        let ignoreRoles = [];
        if ($('#' + unique + '-exclude-roles-label').is(":checked")) {
            $('#' + unique + '-exclude-roles-list span').each(function (i, obj) {
                ignoreRoles.push($(obj).attr("data-value"));
            });
        }
        let ignoreChannels = [];
        if ($('#' + unique + '-exclude-channels-label').is(":checked")) {
            $('#' + unique + '-exclude-channels-list span').each(function (i, obj) {
                ignoreChannels.push($(obj).attr("data-value"));
            })
        }

        body["ignoreRoles"] = ignoreRoles;
        body["ignoreChannels"] = ignoreChannels;

        $.ajax({
            type: "PUT",
            url: "/api/v1/guilds/{{ guild.id }}/automoderationconfig",
            data: JSON.stringify(body),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            crossDomain: true,
            xhrFields: {
                withCredentials: true
            },
            success: function(data){
                toastr.success("Changes saved.");
                hideConfigFromHtml(reloadMap[unique]);
                setTimeout(function() {
                    reloadChanges(reloadMap[unique]);
                }, 500);
            },
            error: function(errMsg) {
                handleRequestError(errMsg);
            }
        });
    }

    function reloadChanges(type) {
        $.ajax({
            type: "GET",
            url: "/api/v1/guilds/{{ guild.id }}/automoderationconfig/" + type,
            crossDomain: true,
            xhrFields: {
                withCredentials: true
            },
            success: function(data){
                try {
                    applyConfigToHtml(data);
                } catch(e) {
                    toastr.error(e, "Failed to reload new config.")
                }
            },
            error: function(errMsg) {
                handleRequestError(errMsg);
            }
        });
    }
</script>
{% endblock scriptblock %}
